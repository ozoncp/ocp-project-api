// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ocp_repo_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OcpRepoApiClient is the client API for OcpRepoApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OcpRepoApiClient interface {
	// Return repos list
	ListRepos(ctx context.Context, in *ListReposRequest, opts ...grpc.CallOption) (*ListReposResponse, error)
	// Return repo description by it id
	DescribeRepo(ctx context.Context, in *DescribeRepoRequest, opts ...grpc.CallOption) (*DescribeRepoResponse, error)
	// Create new repo
	CreateRepo(ctx context.Context, in *CreateRepoRequest, opts ...grpc.CallOption) (*CreateRepoResponse, error)
	// Create new repos
	MultiCreateRepo(ctx context.Context, in *MultiCreateRepoRequest, opts ...grpc.CallOption) (*MultiCreateRepoResponse, error)
	// Remove repo by id
	RemoveRepo(ctx context.Context, in *RemoveRepoRequest, opts ...grpc.CallOption) (*RemoveRepoResponse, error)
	// Update repo
	UpdateRepo(ctx context.Context, in *UpdateRepoRequest, opts ...grpc.CallOption) (*UpdateRepoResponse, error)
}

type ocpRepoApiClient struct {
	cc grpc.ClientConnInterface
}

func NewOcpRepoApiClient(cc grpc.ClientConnInterface) OcpRepoApiClient {
	return &ocpRepoApiClient{cc}
}

func (c *ocpRepoApiClient) ListRepos(ctx context.Context, in *ListReposRequest, opts ...grpc.CallOption) (*ListReposResponse, error) {
	out := new(ListReposResponse)
	err := c.cc.Invoke(ctx, "/ocp.repo.api.OcpRepoApi/ListRepos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpRepoApiClient) DescribeRepo(ctx context.Context, in *DescribeRepoRequest, opts ...grpc.CallOption) (*DescribeRepoResponse, error) {
	out := new(DescribeRepoResponse)
	err := c.cc.Invoke(ctx, "/ocp.repo.api.OcpRepoApi/DescribeRepo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpRepoApiClient) CreateRepo(ctx context.Context, in *CreateRepoRequest, opts ...grpc.CallOption) (*CreateRepoResponse, error) {
	out := new(CreateRepoResponse)
	err := c.cc.Invoke(ctx, "/ocp.repo.api.OcpRepoApi/CreateRepo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpRepoApiClient) MultiCreateRepo(ctx context.Context, in *MultiCreateRepoRequest, opts ...grpc.CallOption) (*MultiCreateRepoResponse, error) {
	out := new(MultiCreateRepoResponse)
	err := c.cc.Invoke(ctx, "/ocp.repo.api.OcpRepoApi/MultiCreateRepo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpRepoApiClient) RemoveRepo(ctx context.Context, in *RemoveRepoRequest, opts ...grpc.CallOption) (*RemoveRepoResponse, error) {
	out := new(RemoveRepoResponse)
	err := c.cc.Invoke(ctx, "/ocp.repo.api.OcpRepoApi/RemoveRepo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpRepoApiClient) UpdateRepo(ctx context.Context, in *UpdateRepoRequest, opts ...grpc.CallOption) (*UpdateRepoResponse, error) {
	out := new(UpdateRepoResponse)
	err := c.cc.Invoke(ctx, "/ocp.repo.api.OcpRepoApi/UpdateRepo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OcpRepoApiServer is the server API for OcpRepoApi service.
// All implementations must embed UnimplementedOcpRepoApiServer
// for forward compatibility
type OcpRepoApiServer interface {
	// Return repos list
	ListRepos(context.Context, *ListReposRequest) (*ListReposResponse, error)
	// Return repo description by it id
	DescribeRepo(context.Context, *DescribeRepoRequest) (*DescribeRepoResponse, error)
	// Create new repo
	CreateRepo(context.Context, *CreateRepoRequest) (*CreateRepoResponse, error)
	// Create new repos
	MultiCreateRepo(context.Context, *MultiCreateRepoRequest) (*MultiCreateRepoResponse, error)
	// Remove repo by id
	RemoveRepo(context.Context, *RemoveRepoRequest) (*RemoveRepoResponse, error)
	// Update repo
	UpdateRepo(context.Context, *UpdateRepoRequest) (*UpdateRepoResponse, error)
	mustEmbedUnimplementedOcpRepoApiServer()
}

// UnimplementedOcpRepoApiServer must be embedded to have forward compatible implementations.
type UnimplementedOcpRepoApiServer struct {
}

func (UnimplementedOcpRepoApiServer) ListRepos(context.Context, *ListReposRequest) (*ListReposResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRepos not implemented")
}
func (UnimplementedOcpRepoApiServer) DescribeRepo(context.Context, *DescribeRepoRequest) (*DescribeRepoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeRepo not implemented")
}
func (UnimplementedOcpRepoApiServer) CreateRepo(context.Context, *CreateRepoRequest) (*CreateRepoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRepo not implemented")
}
func (UnimplementedOcpRepoApiServer) MultiCreateRepo(context.Context, *MultiCreateRepoRequest) (*MultiCreateRepoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiCreateRepo not implemented")
}
func (UnimplementedOcpRepoApiServer) RemoveRepo(context.Context, *RemoveRepoRequest) (*RemoveRepoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRepo not implemented")
}
func (UnimplementedOcpRepoApiServer) UpdateRepo(context.Context, *UpdateRepoRequest) (*UpdateRepoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRepo not implemented")
}
func (UnimplementedOcpRepoApiServer) mustEmbedUnimplementedOcpRepoApiServer() {}

// UnsafeOcpRepoApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OcpRepoApiServer will
// result in compilation errors.
type UnsafeOcpRepoApiServer interface {
	mustEmbedUnimplementedOcpRepoApiServer()
}

func RegisterOcpRepoApiServer(s grpc.ServiceRegistrar, srv OcpRepoApiServer) {
	s.RegisterService(&OcpRepoApi_ServiceDesc, srv)
}

func _OcpRepoApi_ListRepos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReposRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpRepoApiServer).ListRepos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.repo.api.OcpRepoApi/ListRepos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpRepoApiServer).ListRepos(ctx, req.(*ListReposRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpRepoApi_DescribeRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpRepoApiServer).DescribeRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.repo.api.OcpRepoApi/DescribeRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpRepoApiServer).DescribeRepo(ctx, req.(*DescribeRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpRepoApi_CreateRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpRepoApiServer).CreateRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.repo.api.OcpRepoApi/CreateRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpRepoApiServer).CreateRepo(ctx, req.(*CreateRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpRepoApi_MultiCreateRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiCreateRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpRepoApiServer).MultiCreateRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.repo.api.OcpRepoApi/MultiCreateRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpRepoApiServer).MultiCreateRepo(ctx, req.(*MultiCreateRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpRepoApi_RemoveRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpRepoApiServer).RemoveRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.repo.api.OcpRepoApi/RemoveRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpRepoApiServer).RemoveRepo(ctx, req.(*RemoveRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpRepoApi_UpdateRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpRepoApiServer).UpdateRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.repo.api.OcpRepoApi/UpdateRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpRepoApiServer).UpdateRepo(ctx, req.(*UpdateRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OcpRepoApi_ServiceDesc is the grpc.ServiceDesc for OcpRepoApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OcpRepoApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ocp.repo.api.OcpRepoApi",
	HandlerType: (*OcpRepoApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListRepos",
			Handler:    _OcpRepoApi_ListRepos_Handler,
		},
		{
			MethodName: "DescribeRepo",
			Handler:    _OcpRepoApi_DescribeRepo_Handler,
		},
		{
			MethodName: "CreateRepo",
			Handler:    _OcpRepoApi_CreateRepo_Handler,
		},
		{
			MethodName: "MultiCreateRepo",
			Handler:    _OcpRepoApi_MultiCreateRepo_Handler,
		},
		{
			MethodName: "RemoveRepo",
			Handler:    _OcpRepoApi_RemoveRepo_Handler,
		},
		{
			MethodName: "UpdateRepo",
			Handler:    _OcpRepoApi_UpdateRepo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/ocp-repo-api/ocp-repo-api.proto",
}
