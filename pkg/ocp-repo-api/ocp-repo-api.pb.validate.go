// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/ocp-repo-api/ocp-repo-api.proto

package ocp_repo_api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on ListReposRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListReposRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Limit

	// no validation rules for Offset

	return nil
}

// ListReposRequestValidationError is the validation error returned by
// ListReposRequest.Validate if the designated constraints aren't met.
type ListReposRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListReposRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListReposRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListReposRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListReposRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListReposRequestValidationError) ErrorName() string { return "ListReposRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListReposRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListReposRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListReposRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListReposRequestValidationError{}

// Validate checks the field values on ListReposResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListReposResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetRepos() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListReposResponseValidationError{
					field:  fmt.Sprintf("Repos[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListReposResponseValidationError is the validation error returned by
// ListReposResponse.Validate if the designated constraints aren't met.
type ListReposResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListReposResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListReposResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListReposResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListReposResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListReposResponseValidationError) ErrorName() string {
	return "ListReposResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListReposResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListReposResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListReposResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListReposResponseValidationError{}

// Validate checks the field values on CreateRepoRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *CreateRepoRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetProjectId() <= 0 {
		return CreateRepoRequestValidationError{
			field:  "ProjectId",
			reason: "value must be greater than 0",
		}
	}

	if m.GetUserId() <= 0 {
		return CreateRepoRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
	}

	// no validation rules for Link

	return nil
}

// CreateRepoRequestValidationError is the validation error returned by
// CreateRepoRequest.Validate if the designated constraints aren't met.
type CreateRepoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRepoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRepoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRepoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRepoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRepoRequestValidationError) ErrorName() string {
	return "CreateRepoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRepoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRepoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRepoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRepoRequestValidationError{}

// Validate checks the field values on CreateRepoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateRepoResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for RepoId

	return nil
}

// CreateRepoResponseValidationError is the validation error returned by
// CreateRepoResponse.Validate if the designated constraints aren't met.
type CreateRepoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRepoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRepoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRepoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRepoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRepoResponseValidationError) ErrorName() string {
	return "CreateRepoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateRepoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRepoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRepoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRepoResponseValidationError{}

// Validate checks the field values on MultiCreateRepoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MultiCreateRepoRequest) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetRepos() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MultiCreateRepoRequestValidationError{
					field:  fmt.Sprintf("Repos[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// MultiCreateRepoRequestValidationError is the validation error returned by
// MultiCreateRepoRequest.Validate if the designated constraints aren't met.
type MultiCreateRepoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultiCreateRepoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultiCreateRepoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultiCreateRepoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultiCreateRepoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultiCreateRepoRequestValidationError) ErrorName() string {
	return "MultiCreateRepoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MultiCreateRepoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultiCreateRepoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultiCreateRepoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultiCreateRepoRequestValidationError{}

// Validate checks the field values on MultiCreateRepoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MultiCreateRepoResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for CountOfCreated

	return nil
}

// MultiCreateRepoResponseValidationError is the validation error returned by
// MultiCreateRepoResponse.Validate if the designated constraints aren't met.
type MultiCreateRepoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultiCreateRepoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultiCreateRepoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultiCreateRepoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultiCreateRepoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultiCreateRepoResponseValidationError) ErrorName() string {
	return "MultiCreateRepoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MultiCreateRepoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultiCreateRepoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultiCreateRepoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultiCreateRepoResponseValidationError{}

// Validate checks the field values on RemoveRepoRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *RemoveRepoRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetRepoId() <= 0 {
		return RemoveRepoRequestValidationError{
			field:  "RepoId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// RemoveRepoRequestValidationError is the validation error returned by
// RemoveRepoRequest.Validate if the designated constraints aren't met.
type RemoveRepoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveRepoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveRepoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveRepoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveRepoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveRepoRequestValidationError) ErrorName() string {
	return "RemoveRepoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveRepoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveRepoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveRepoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveRepoRequestValidationError{}

// Validate checks the field values on RemoveRepoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveRepoResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Found

	return nil
}

// RemoveRepoResponseValidationError is the validation error returned by
// RemoveRepoResponse.Validate if the designated constraints aren't met.
type RemoveRepoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveRepoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveRepoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveRepoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveRepoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveRepoResponseValidationError) ErrorName() string {
	return "RemoveRepoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveRepoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveRepoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveRepoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveRepoResponseValidationError{}

// Validate checks the field values on DescribeRepoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribeRepoRequest) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetRepoId() <= 0 {
		return DescribeRepoRequestValidationError{
			field:  "RepoId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// DescribeRepoRequestValidationError is the validation error returned by
// DescribeRepoRequest.Validate if the designated constraints aren't met.
type DescribeRepoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeRepoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeRepoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeRepoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeRepoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeRepoRequestValidationError) ErrorName() string {
	return "DescribeRepoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeRepoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeRepoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeRepoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeRepoRequestValidationError{}

// Validate checks the field values on DescribeRepoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribeRepoResponse) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetRepo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribeRepoResponseValidationError{
				field:  "Repo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DescribeRepoResponseValidationError is the validation error returned by
// DescribeRepoResponse.Validate if the designated constraints aren't met.
type DescribeRepoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeRepoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeRepoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeRepoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeRepoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeRepoResponseValidationError) ErrorName() string {
	return "DescribeRepoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeRepoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeRepoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeRepoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeRepoResponseValidationError{}

// Validate checks the field values on UpdateRepoRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *UpdateRepoRequest) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetRepo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateRepoRequestValidationError{
				field:  "Repo",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateRepoRequestValidationError is the validation error returned by
// UpdateRepoRequest.Validate if the designated constraints aren't met.
type UpdateRepoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRepoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRepoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRepoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRepoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRepoRequestValidationError) ErrorName() string {
	return "UpdateRepoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRepoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRepoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRepoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRepoRequestValidationError{}

// Validate checks the field values on UpdateRepoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateRepoResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Found

	return nil
}

// UpdateRepoResponseValidationError is the validation error returned by
// UpdateRepoResponse.Validate if the designated constraints aren't met.
type UpdateRepoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateRepoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateRepoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateRepoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateRepoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateRepoResponseValidationError) ErrorName() string {
	return "UpdateRepoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateRepoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateRepoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateRepoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateRepoResponseValidationError{}

// Validate checks the field values on Repo with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Repo) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetId() <= 0 {
		return RepoValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
	}

	if m.GetProjectId() <= 0 {
		return RepoValidationError{
			field:  "ProjectId",
			reason: "value must be greater than 0",
		}
	}

	if m.GetUserId() <= 0 {
		return RepoValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
	}

	// no validation rules for Link

	return nil
}

// RepoValidationError is the validation error returned by Repo.Validate if the
// designated constraints aren't met.
type RepoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RepoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RepoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RepoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RepoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RepoValidationError) ErrorName() string { return "RepoValidationError" }

// Error satisfies the builtin error interface
func (e RepoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRepo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RepoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RepoValidationError{}

// Validate checks the field values on NewRepo with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *NewRepo) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetProjectId() <= 0 {
		return NewRepoValidationError{
			field:  "ProjectId",
			reason: "value must be greater than 0",
		}
	}

	if m.GetUserId() <= 0 {
		return NewRepoValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
	}

	// no validation rules for Link

	return nil
}

// NewRepoValidationError is the validation error returned by NewRepo.Validate
// if the designated constraints aren't met.
type NewRepoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NewRepoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NewRepoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NewRepoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NewRepoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NewRepoValidationError) ErrorName() string { return "NewRepoValidationError" }

// Error satisfies the builtin error interface
func (e NewRepoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNewRepo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NewRepoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NewRepoValidationError{}
