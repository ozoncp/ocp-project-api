// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ocp_project_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OcpProjectApiClient is the client API for OcpProjectApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OcpProjectApiClient interface {
	// Return projects list
	ListProjects(ctx context.Context, in *ListProjectsRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error)
	// Return projects description by it id
	DescribeProject(ctx context.Context, in *DescribeProjectRequest, opts ...grpc.CallOption) (*DescribeProjectResponse, error)
	// Create new project
	CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectResponse, error)
	// Remove project by id
	RemoveProject(ctx context.Context, in *RemoveProjectRequest, opts ...grpc.CallOption) (*RemoveProjectResponse, error)
}

type ocpProjectApiClient struct {
	cc grpc.ClientConnInterface
}

func NewOcpProjectApiClient(cc grpc.ClientConnInterface) OcpProjectApiClient {
	return &ocpProjectApiClient{cc}
}

func (c *ocpProjectApiClient) ListProjects(ctx context.Context, in *ListProjectsRequest, opts ...grpc.CallOption) (*ListProjectsResponse, error) {
	out := new(ListProjectsResponse)
	err := c.cc.Invoke(ctx, "/ocp.project.api.OcpProjectApi/ListProjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpProjectApiClient) DescribeProject(ctx context.Context, in *DescribeProjectRequest, opts ...grpc.CallOption) (*DescribeProjectResponse, error) {
	out := new(DescribeProjectResponse)
	err := c.cc.Invoke(ctx, "/ocp.project.api.OcpProjectApi/DescribeProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpProjectApiClient) CreateProject(ctx context.Context, in *CreateProjectRequest, opts ...grpc.CallOption) (*CreateProjectResponse, error) {
	out := new(CreateProjectResponse)
	err := c.cc.Invoke(ctx, "/ocp.project.api.OcpProjectApi/CreateProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpProjectApiClient) RemoveProject(ctx context.Context, in *RemoveProjectRequest, opts ...grpc.CallOption) (*RemoveProjectResponse, error) {
	out := new(RemoveProjectResponse)
	err := c.cc.Invoke(ctx, "/ocp.project.api.OcpProjectApi/RemoveProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OcpProjectApiServer is the server API for OcpProjectApi service.
// All implementations must embed UnimplementedOcpProjectApiServer
// for forward compatibility
type OcpProjectApiServer interface {
	// Return projects list
	ListProjects(context.Context, *ListProjectsRequest) (*ListProjectsResponse, error)
	// Return projects description by it id
	DescribeProject(context.Context, *DescribeProjectRequest) (*DescribeProjectResponse, error)
	// Create new project
	CreateProject(context.Context, *CreateProjectRequest) (*CreateProjectResponse, error)
	// Remove project by id
	RemoveProject(context.Context, *RemoveProjectRequest) (*RemoveProjectResponse, error)
	mustEmbedUnimplementedOcpProjectApiServer()
}

// UnimplementedOcpProjectApiServer must be embedded to have forward compatible implementations.
type UnimplementedOcpProjectApiServer struct {
}

func (UnimplementedOcpProjectApiServer) ListProjects(context.Context, *ListProjectsRequest) (*ListProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListProjects not implemented")
}
func (UnimplementedOcpProjectApiServer) DescribeProject(context.Context, *DescribeProjectRequest) (*DescribeProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeProject not implemented")
}
func (UnimplementedOcpProjectApiServer) CreateProject(context.Context, *CreateProjectRequest) (*CreateProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProject not implemented")
}
func (UnimplementedOcpProjectApiServer) RemoveProject(context.Context, *RemoveProjectRequest) (*RemoveProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveProject not implemented")
}
func (UnimplementedOcpProjectApiServer) mustEmbedUnimplementedOcpProjectApiServer() {}

// UnsafeOcpProjectApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OcpProjectApiServer will
// result in compilation errors.
type UnsafeOcpProjectApiServer interface {
	mustEmbedUnimplementedOcpProjectApiServer()
}

func RegisterOcpProjectApiServer(s grpc.ServiceRegistrar, srv OcpProjectApiServer) {
	s.RegisterService(&OcpProjectApi_ServiceDesc, srv)
}

func _OcpProjectApi_ListProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpProjectApiServer).ListProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.project.api.OcpProjectApi/ListProjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpProjectApiServer).ListProjects(ctx, req.(*ListProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpProjectApi_DescribeProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpProjectApiServer).DescribeProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.project.api.OcpProjectApi/DescribeProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpProjectApiServer).DescribeProject(ctx, req.(*DescribeProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpProjectApi_CreateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpProjectApiServer).CreateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.project.api.OcpProjectApi/CreateProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpProjectApiServer).CreateProject(ctx, req.(*CreateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpProjectApi_RemoveProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpProjectApiServer).RemoveProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.project.api.OcpProjectApi/RemoveProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpProjectApiServer).RemoveProject(ctx, req.(*RemoveProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OcpProjectApi_ServiceDesc is the grpc.ServiceDesc for OcpProjectApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OcpProjectApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ocp.project.api.OcpProjectApi",
	HandlerType: (*OcpProjectApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListProjects",
			Handler:    _OcpProjectApi_ListProjects_Handler,
		},
		{
			MethodName: "DescribeProject",
			Handler:    _OcpProjectApi_DescribeProject_Handler,
		},
		{
			MethodName: "CreateProject",
			Handler:    _OcpProjectApi_CreateProject_Handler,
		},
		{
			MethodName: "RemoveProject",
			Handler:    _OcpProjectApi_RemoveProject_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/ocp-project-api/ocp-project-api.proto",
}
