// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ozoncp/ocp-project-api/internal/flusher (interfaces: Flusher)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/ozoncp/ocp-project-api/internal/models"
)

// MockFlusher is a mock of Flusher interface.
type MockFlusher struct {
	ctrl     *gomock.Controller
	recorder *MockFlusherMockRecorder
}

// MockFlusherMockRecorder is the mock recorder for MockFlusher.
type MockFlusherMockRecorder struct {
	mock *MockFlusher
}

// NewMockFlusher creates a new mock instance.
func NewMockFlusher(ctrl *gomock.Controller) *MockFlusher {
	mock := &MockFlusher{ctrl: ctrl}
	mock.recorder = &MockFlusherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFlusher) EXPECT() *MockFlusherMockRecorder {
	return m.recorder
}

// FlushProjects mocks base method.
func (m *MockFlusher) FlushProjects(arg0 context.Context, arg1 []models.Project) []models.Project {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlushProjects", arg0, arg1)
	ret0, _ := ret[0].([]models.Project)
	return ret0
}

// FlushProjects indicates an expected call of FlushProjects.
func (mr *MockFlusherMockRecorder) FlushProjects(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushProjects", reflect.TypeOf((*MockFlusher)(nil).FlushProjects), arg0, arg1)
}

// FlushRepos mocks base method.
func (m *MockFlusher) FlushRepos(arg0 context.Context, arg1 []models.Repo) []models.Repo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlushRepos", arg0, arg1)
	ret0, _ := ret[0].([]models.Repo)
	return ret0
}

// FlushRepos indicates an expected call of FlushRepos.
func (mr *MockFlusherMockRecorder) FlushRepos(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushRepos", reflect.TypeOf((*MockFlusher)(nil).FlushRepos), arg0, arg1)
}
